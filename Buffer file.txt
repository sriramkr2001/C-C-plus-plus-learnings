




//     for(int i=0;i<n;i++)
//     {
//        if(arr[i]>0)
//        {
//        swap(arr[j],arr[i]);
//        j++;
//        }
//     }
//     for(int i=0;i<n;i++)
//     {
//         cout<<arr[i]<<" ";
//     }
//   return 0;
//  Input : arr[]  = {1, 2, 0, 0, 0, 3, 6}
//Output : 1 2 3 6 0 0 0

//Input: arr[] = {0, 1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0, 9}
//Output: 1 9 8 4 2 7 6 9 0 0 0 0 0

// int main() 
// int i=0;
// int j=0;

// int sum[2]={0};

// int arr[2][2];
// for(i=0;i<2;i++)
// {
//   for(j=0;j<2;j++)
//   {
//       cin>>arr[i][j];
//   }
// } 
// for( int k=0;k<2;k++)
// {
//   for( int l=0;l<2;l++)
//   {
//      sum[k]=sum[k]+arr[k][l];
//   }
// }
// for( int k=0;k<2;k++)
// {
//   cout<<sum[k]<<endl;
// }
// return 0;
// }
 
 // C++ program to implement recursive Binary Search 
#include <bits/stdc++.h> 
using namespace std; 
  
// A recursive binary search function. It returns 
// location of x in given array arr[l..r] is present, 
// otherwise -1 
// int binarySearch(int arr[], int l, int r, int x) 
// { 
//     if (r >= l) { 
//         int mid = l + (r - l) / 2; 
  
//         // If the element is present at the middle 
//         // itself 
//         if (arr[mid] == x) 
//             return mid; 
  
//         // If element is smaller than mid, then 
//         // it can only be present in left subarray 
//         if (arr[mid] > x) 
//           {

//           int X = binarySearch(arr, l, mid - 1, x); 
//         return X;
//       }
  
//         // Else the element can only be present 
//         // in right subarray
//         else {
//         return binarySearch(arr, mid + 1, r, x); 
//         }
//       }



  
//     // We reach here when element is not 
//     // present in array 
//     return -1; 
// } 
  
// int main(void) 
// { 
//     int arr[] = { 2, 3, 4, 10, 40 }; 
//     int x = 2; 
//     int n = sizeof(arr) / sizeof(arr[0]); 
//     int result = binarySearch(arr, 0, n - 1, x); 
//     (result == -1) ? cout << "Element is not present in array"
//                    : cout << "Element is present at index " << result; 
//     return 0; 
// } 



// #include <iostream>
 
// void printArray(int array[], int length)
// {
//     std::cout << "[";
     
//     for(int i = 0; i < length; i++)
//     {
//         std::cout << array[i];
         
//         if(i < (length - 1))
//             std::cout << ", ";
//         else
//             std::cout << "]" << std::endl;
//     }
// }
 
// void reverse(int array[], int start, int end)
// {
//     while(start < end)
//     {
//         int temp = array[start];
//         array[start] = array[end];
//         array[end] = temp;
//         start++;
//         end--;
//     }
// }
 
// // Rearrange the array with all negative integers
// // on left and positive integers on right 
// // use recursion to split the array with first element
// // as one half and the rest array as another and then 
// // merge it with head of the array in each step  
// void rearrange(int array[], int start, int end)
// {
//     // exit condition 
//     if(start == end)
//         return;
     
//     // rearrange the array except the first
//     // element in each recursive call 
//     rearrange(array, (start + 1), end);
     
//     // If the first element of the array is positive, 
//     // then right-rotate the array by one place first
//     // and then reverse the merged array.
//     if(array[start] <= 0)
//     {
//         reverse(array, (start + 1), end);
//         reverse(array, start, end);
//     }
// }
 
// // Driver code
// int main()
// {
//     int array[] = {-1,2,-3,4,-5,6,-7,8,-9,10};
//     int length = (sizeof(array) / sizeof(array[0]));
//     int countpositive = 0;
     
//     for(int i = 0; i < length; i++)
//     {
//         if(array[i] > 0)
//             countpositive++;
//     }
     
//     std::cout << "array: ";
//     printArray(array, length);
//     rearrange(array, 0, (length - 1));
     
//     reverse(array, countpositive, (length - 1));
     
//     std::cout << "rearranged array: ";
//     printArray(array, length);
//     return 0;
// }

// #include<bits/stdc++.h>
// using namespace std;
// int main()
// {

//   int n;
//   cin>>n;
//   int* A= new int[n];
//   vector<int>v(3*n,0);

//   for(int i=0;i<n;i++)
//   {
//     cin>>A[i];
//    v[A[i]]++;

//   }
  
//   // for(int i=0;i<n;i++)
//   // {
//   //   if(A[i]>5)
//   //     cout<<A[i]<<endl;
//   // }

//   for(int i=0;i<n;i++)
//   {  
//     if(v[A[i]]==0)
//       break;
//   if(v[A[i]]>1)
//   {
//     cout<<A[i]<<endl;
//     v[A[i]]=0;
//   }

//   }
// return 0;
// }
// #include<bits/stdc++.h>
// using namespace std;

// int main()
// {  

//   int n;
//   cin>>n;

//   int* arr = new int[n];
//   for(int i=0;i<n;i++)
//   {
//     cin>>arr[i];
//   }

// // int j=n-1;
// // int k=0;
// // for(int i=0;i<n;i++)
// //   {  
// //     if(i%2==0)
// //     {
// //       arr[i]+=(arr[j--]%(n+1))*(n+1); 
// //     }
// //     else
// //       {
// //         arr[i]+=(arr[k++]%(n+1))*(n+1);
// //       }
  
// //   }
// //   for(int i=0;i<n;i++)
// //   {
// //      cout<<arr[i]/(n+1)<<" ";

// //   }
  
//   for(int i=0;i<n;i++)
//   {
//     arr[i]+= (arr[arr[i]]%n)*n;
//   }

//   for(int i=0;i<n;i++)
//   {
//      cout<<arr[i]/n<<" ";
//   }


//   return 0;
  



// }\



// #include<bits/stdc++.h>
// using namespace std;
// int add( )
// {
//    char ch;
//    cin>>ch;
 
//   if(ch=='N')
// {
//    return 0;
//  }  
//    int x,y;
//    cin>>x>>y;
//    int sum = x+y;
//    cout<<sum<<endl;
//    add();
// return sum;
// }

// int main()
// {
//    int x;
//  x= add();
//  cout<<pow(x,2)<<endl;
//   return 0;
// }
//  int sum(int* a,int l,int r)
//  {
//    if(l>r)
//     return 0;
//    else
//     return a[l] + sum(a,l+1,r);
//  }
// int main()
// {
 
//  int n;
//  cin>>n;
//  int* A=new int[n];
//  for(int i=0;i<n;i++)
//  {
//   cin>>A[i];
//  }
//  int x;
//  x=sum(A,0,n-1);
//  cout<<x;
// }


#include<bits/stdc++.h>
using namespace std;
int main()
{
  int T;
  cin>>T;
  while(T--)
  {
    // int x,y,n;
    // cin>>x>>y>>n;
    // int k=n%x;
    // if(k-y>=0)
    //   n=n-(k-y);
    // else
    //   n=n-k-x+y;
    // cout<<n<<endl;
 //    int n;
 //    cin>>n;
 //    int count=0;
    
 //    while(n!=1)
 //  {  
 //     if(n<6&&n%2==0)
 //     {
 //      cout<<-1;
 //      count=0;
 //       break;
 //     }

 //    if(n%6==0)
 //    {
 //      count++;
 //     n=n/6;
 //    }
    
      
 //   else 
 //   {
 //    n=n*2;
 //    count++;
 //   }
 // }
 // if(n==1) 
 //    {
 //    cout<<count;
 //    count=0;
 //    }
  
 //  cout<<endl;
    int n;
    cin>>n;
    int* A = new int[n];
    int sum=0;
    int nc=0;
    for(int i=0;i<n;i++)  
    {
      cin>>A[i];
      sum+=A[i];
      if(A[i]==3)
        nc++;
    }
     if(sum==0)
      cout<<0<<endl;
    else if(sum<3&&n<3)
      cout<<0<<endl;
    else if(sum!=0&&sum<3&&n==3)
      cout<<n-sum-1<<endl;
    else if(sum!=0&&sum<3&&n>3)
      cout<<3-sum<<endl;
   else if(sum==3&&n!=3)
      cout<<3<<endl;
    else if(sum==3&&n==3)
    { 
      if(nc>0)
      cout<<3<<endl;
      else
      cout<<1<<endl;
    }
      else
    cout<<(sum%3)<<endl;
  }
  return 0;
}


////// Next Greater Element to Right !! /////////


// Next Smaller Element !!

// vector <long long> nextLargerElement(long long int arr[], int n){

// vector<long long>ans;
//     stack<long long>s;
    
//     for(int i = 0; i <= n-1; i++)
//     {
//         if(s.empty())
//             ans.push_back(-1);
//         else
//         {
//             while(!s.empty() && s.top() >= arr[i])
//                 s.pop();
//             if(s.empty())
//                 ans.push_back(-1);
//             else
//                 ans.push_back(s.top());
//         }
//         s.push(arr[i]);
//     }
    
//     // reverse(ans.begin(), ans.end());
    
//     return ans;
   
// }
 
// int main()
// {
//   int n;
//   cin>>n;
//   long long int arr[n];
//   for(int i=0;i<n;i++)
//    {
//       cin>>arr[i];
//    }
//  vector<long long int >A = nextLargerElement( arr, n);
//  for(auto x: A)
//  {
//   cout<<x<<" ";
//  }
//  return 0;
// }





// vector <long long> nextLargerElement(long long int arr[], int n){

// vector<long long>ans,v;
//     stack<long long>s;
//      int j=0;
//     for(int i = 0; i <= n-1; i++)
//     {   
//         int count = 0;
//         if(s.empty())
//             ans.push_back(1);
//         else
//         {
//             while(!s.empty() && s.top() <= arr[i])
//                  {
//                     int x=s.top();
//                      s.pop();
//                     v.push_back(x);

//                  count++;
//                  }

//                  for(int i=0;i<count;i++)
//                  {
//                   s.push(v[i]);
//                  }


//             if(s.empty())
//                 ans.push_back(count+1);
//             else
//                 ans.push_back(count+1);
//         }
//         s.push(arr[i]);
//     }
    
//     // reverse(ans.begin(), ans.end());
    
//     return ans;
   
// }
 
// int main()
// {
//   int n;
//   cin>>n;
//   long long int arr[n];
//   for(int i=0;i<n;i++)
//    {
//       cin>>arr[i];
//    }
//  vector<long long int >A = nextLargerElement( arr, n);
//  for(auto x: A)
//  {
//   cout<<x<<" ";
//  }
//  return 0;
// }


void insert(stack<int>&s,int temp)
{
  if(s.size()==0||temp<=s.top())
  { 
    s.push(temp);
   return;
  }

  
   int Temp =s.top();
    s.pop();
    insert(s,temp);
    s.push(Temp);

}

void sort_stack(stack<int>&s)
{  
   if(s.size()==1)
   {
   return;
   }

  int temp=s.top();
  s.pop();
  sort_stack(s);
  insert(s, temp);
 
}

int main()
{

   stack<int>s;
   int n;
   cin>>n;
   for(int i=0;i<n;i++)
   {
    int x;
    cin>>x;
    s.push(x);
  }
   sort_stack(s);
    for(int i=0;i<n;i++)
    {
      int y= s.top();
      cout<<y<<" ";
      s.pop();
    }
return 0;
   }